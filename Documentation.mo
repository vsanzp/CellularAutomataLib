within CellularAutomataLib;
class Documentation "Users Guide"
  extends Modelica.Icons.Information;

  class Installation "Installation of the library"
    extends Modelica.Icons.Information;
    annotation (
     preferredView = "info",
      Documentation(info="<html>
<p><br><b><span style=\"font-size: 14pt; color: #008000;\">Installation of the library</span></b> </p>
<p>1. The library is composed of multiple .mo files and directories, that contain the Modelica code, and the Resources directory, that contains the C code used to perform the simulations and to describe the models. These files need to be located in a directory (e.g., CellularAutomataLib/) in your local workspace, no further installation is required.</p>
<p>2. In order to automatically generate the graphical animations of the simulations the Raylib (<a href=\"http://www.raylib.com\">www.raylib.com</a>) library program has to be installed in the computer. Raylib installation depends on your operating system:</p>
<p>- Windows: just download and run the installer. More detailed instructions can be found at https://github.com/raysan5/raylib/wiki/Working-on-Windows</p>
<p>- Linux: follow these instructions: <a href=\"https://github.com/raysan5/raylib/wiki/Working-on-GNU-Linux\">https://github.com/raysan5/raylib/wiki/Working-on-GNU-Linux</a> to intall dependencies and build the library.</p>
<p>- Other OS: Raylib supports other operating systems, described in the wiki as development platforms (<a href=\"https://github.com/raysan5/raylib/wiki\">https://github.com/raysan5/raylib/wiki</a>)</p>
<p><br>Once installed, no further action is required since CellularAutomataLib includes and links Raylib code with the models in order to execute it in the simulations.</p>
<p><br><br><b><span style=\"color: #008000;\">Use, model development and simulation</span></b></p><p><br><br>Once installed, the library can be loaded into a Modelica development tool (e.g., Dymola, OpenModelica) by opening the <span style=\"font-family: monospace;\">package.mo</span> file at the top of the hierarchy of directories.</p>
<p>The <i>NewModels</i> package included in this Documentation contains a description on how to construct new models and use the library, combining C and Modelica code to develop new models. </p>
<p>The <i>InterfaceModels</i> package contains a description on how to combine cellular automata models with other Modelica models using the provided interfaces.</p>
<p><br>The <i>Examples</i> package contains multiple examples that can be directly simulated using the functionality provided by the Modelica tool. The files contaning the C code of each example are located in the <span style=\"font-family: monospace;\">Resources/Include</span> directory. Check the annotations of external functions in each model to locate the corresponding C file.</p>
</html>"));
  end Installation;

  class NewModels "Development of new CA models"
    extends Modelica.Icons.Information;
    annotation (
     preferredView = "info",
      Documentation(info="<html>
<p><br><b><span style=\"font-size: 14pt; color: #008000;\">Development of new cellular automata models</span></b></p>
<p>A model in <i>CellularAutomataLib</i> is composed of a cellular space, that represents the lattice of cells, including their state (S) and the transition function (&delta;), and some models, named interface models (i.e., inputs X, &Omega;, and outputs Y, &lambda;), used as interface between different cellular spaces, or between cellular spaces and other models.</p>
<p><i>CellularAutomataLib</i> models are composed of a combination of Modelica code and C code. Cellular spaces and interface models are described using Modelica. However, the behavior of cellular spaces and interfaces, and the CA simulation algorithm are implemented using external C functions that are related to their corresponding Modelica models using the external function interface. In this way, the external C code is not involved in the automatic translation of the Modelica model, which improves the scalability and the performance of the simulations.</p>
<p>The relationship between the external C code and the Modelica code is summarized in the figure below. The file <span style=\"font-family: Courier New;\">CellularAutomataLib.c</span> contains C code used to describe general data structures (e.g., cellular spaces and cells) and functions to implement the CA simulation algorithm. These data structures and functions are common to all CA and should not be modified by the user. The behavior of the model should be defined in another file (e.g.,<span style=\"font-family: Courier New;\"> Model.c</span><span style=\"font-family: Sans Serif;\">)</span>, where the user has to implement the data structure used to describe the state of the cells, its default and initial values and the transition rule. <span style=\"font-family: Courier New;\">CellularAutomataLib.c</span> has to be included in <span style=\"font-family: Courier New;\">Model.c</span> in order to use the basic functionality of the library. Once the behavior of the automaton is described in C, the user can describe the cellular spaces and their interfaces using Modelica and relate them with the behavior defined in C. Finally, cellular spaces and interface models can be combined, by means of instances, to describe more complex CA models (e.g., that may include multiple inter-connected cellular spaces and interfaces). </p>
<p><span style=\"font-family: Sans Serif;\"><img src=\"modelica://CellularAutomataLib/Resources/FIGS/diagram.png\"/></span></p>
<p>The procedure to create a cellular automata model can be divided in the following steps: </p>
<p></span><b></span><span style=\"font-size: 10.8pt; color: #008000;\">1. Description of the Cell State and Rule using External C Code.</b></p>
<p>In order to facilitate the description of the behavior of new cellular spaces, the library includes a template file (named <span style=\"font-family: Courier New;\">draft.c</span>) that can be used to describe the required external C functions.</p>
<p>Following the formal specification of the automata, the user has to define the state variables that represent the state of the cells (S) and the model behavior (i.e., the transition function &delta;) by reimplementing the functions included in the <span style=\"font-family: Courier New;\">draft.c</span> file, into a new file (e.g., <span style=\"font-family: Courier New;\">model.c</span>). The time base T is set using the parameters <span style=\"font-family: Courier New;\">TStep</span> and <span style=\"font-family: Courier New;\">Initial step</span> of the cellular space model. The rest of the elements of the tuple (X, &Omega;, Y, &lambda;) are defined using the interface models.</p>
<p>As an example, the development of the Rule30 model described by Wolfram is presented. The transition function for this model is shown in the next figure.</p>
<p><img src=\"modelica://CellularAutomataLib/Resources/FIGS/rule30.png\"/></p>
<p>The<span style=\"font-family: Courier New;\"> draft.c </span>file can be used as a template to describe the behavior of the model. It has been renamed as <span style=\"font-family: Courier New;\">wolfram.c</span> for this example (this file can also be found in the <span style=\"font-family: monospace;\">Resources/Include</span> directory of the library).</p>
<p>The C code corresponding to the description of the state, default and initial functions is shown in file<span style=\"font-family: Courier New;\"> wolfram.c</span>. The state of each cell is defined as an <span style=\"font-family: Courier New;\">int</span> value by modifying the <span style=\"font-family: Courier New;\">State</span> data type in the template (now <span style=\"font-family: Courier New;\">RState</span>). The default value for the cell state will be set using the <span style=\"font-family: Courier New;\">RDefaultState</span> function, and so it has to be modified to set the default state to 0. The <span style=\"font-family: Courier New;\">Default</span> function of the <span style=\"font-family: Courier New;\">CellSpace</span> model will be redeclared using the function <span style=\"font-family: Courier New;\">RDefault</span>, that includes a pointer to <span style=\"font-family: Courier New;\">RDefaultState</span> and a call to the <span style=\"font-family: Courier New;\">CS_InitDefault</span> function, used to set the default state in the cellular space. The state of initialized cells will be set using the <span style=\"font-family: Courier New;\">RInitialState</span> function, and so it has to be modified to set the initial state to 1. The <span style=\"font-family: Courier New;\">RInit </span>function will be used to redeclare the <span style=\"font-family: Courier New;\">Initial</span> function of the <span style=\"font-family: Courier New;\">CellSpace</span> model.</p>
<p>The transition function shown above has to be implemented by modifying the <span style=\"font-family: Courier New;\">transition</span> function in the template (cf. <span style=\"font-family: Courier New;\">rule30</span> function in <span style=\"font-family: Courier New;\">wolfram.c</span>). In order to automatically generate the graphical animation, the <span style=\"font-family: Courier New;\">Display</span> function in the template (now <span style=\"font-family: Courier New;\">RDisplay</span>) has to be modified to convert the state of the cell (i.e., the <span style=\"font-family: Courier New;\">RState</span> data type) into a <span style=\"font-family: Courier New;\">double</span> value that corresponds to the color that will be displayed for the cell in the animation. The corresponding C code is also shown in file <span style=\"font-family: Courier New;\">wolfram.c</span>. </p>
<p></span><b></span><span style=\"font-size: 10.8pt; color: #008000;\">2. Description of New Cellular Spaces in Modelica.</b></p>
<p>A cellular space in <i>CellularAutomataLib</i> is composed of the <span style=\"font-family: Courier New;\">CS</span> external object that represents the space; and the cellular space model used to simulate it (<span style=\"font-family: Courier New;\">CellSpace</span>). The external object represents the data structure used to store the information about the space during the simulation. Two functions, <span style=\"font-family: Courier New;\">constructor</span> and <span style=\"font-family: Courier New;\">destructor</span>, are used to initialize this data structure at the beginning of the simulation and destroy it at the end.</p>
<p>The <span style=\"font-family: Courier New;\">CellSpace</span> model is defined as a partial model (i.e., a model that can not be directly instantiated) that describes the multi-dimensional space represented by the automaton, and includes the code used to simulate the automaton. Each cellular space instantiates a <span style=\"font-family: Courier New;\">CS</span> external object to represent the space. The characteristics of the <span style=\"font-family: Courier New;\">CellSpace</span> model have to be inherited by another model (i.e., using the extends Modelica clause) in order to define a new cellular space. The cellular space model includes three local functions: <span style=\"font-family: Courier New;\">Default</span>, that is used to define the default state of the cells (i.e., cells not initially active). <span style=\"font-family: Courier New;\">Initial</span>, that is used to initialize the state of the cells indicated using the <span style=\"font-family: Courier New;\">init_cells</span> parameter, and activate them; and <span style=\"font-family: Courier New;\">Rule</span>, that represents the transition function and is used to update the state of the cells at each simulation step.</p>
<p>At the beginning of the simulation, the <span style=\"font-family: Courier New;\">CS</span> external object is initialized using its constructor function, the cellular space defines the default state using the <span style=\"font-family: Courier New;\">Default</span> function and initializes the cells indicated in the <span style=\"font-family: Courier New;\">init_cells</span> parameter using the <span style=\"font-family: Courier New;\">Initial</span> function. After that, it performs periodic simulation steps every <span style=\"font-family: Courier New;\">Tstep</span> time by executing the <span style=\"font-family: Courier New;\">Rule</span> function, starting at time = Initial step (i.e., <span style=\"font-family: Courier New;\">sample(Initial step,Tstep)</span>). The behavior of the cellular space is described by re-declaring these local functions with other Modelica functions that call external C functions, that contain the desired behavior (e.g., functions implemented using the <span style=\"font-family: Courier New;\">draft.c</span> file).</p>
<p>Following the example of the Rule30 model, the cellular space is described in Modelica by extending the <span style=\"font-family: Courier New;\">CellSpace</span> model (this model can be found in the library as CellularAutomataLib.Exmaples.CS_1D.CSR30). The <span style=\"font-family: Courier New;\">Default</span>, <span style=\"font-family: Courier New;\">Initial</span> and <span style=\"font-family: Courier New;\">Rule</span> functions of the new cellular space have to be redeclared with functions that call the <span style=\"font-family: Courier New;\">RDefault</span>, <span style=\"font-family: Courier New;\">RInitial</span> and <span style=\"font-family: Courier New;\">R30Step</span> functions previously defined in <span style=\"font-family: Courier New;\">wolfram.c</span>.</p>
<p>The parameters for the Rule30 model are: <span style=\"font-family: Courier New;\">X = 20</span>, <span style=\"font-family: Courier New;\">Y = 10 </span>(to display 10 steps in the animation), <span style=\"font-family: Courier New;\">neighborhood = {- 1,1}</span>, <span style=\"font-family: Courier New;\">wrapped borders = 1</span>, <span style=\"font-family: Courier New;\">Tstep = 1</span>, <span style=\"font-family: Courier New;\">initial_step = 0</span>, <span style=\"font-family: Courier New;\">init_cells = 10</span>, <span style=\"font-family: Courier New;\">name = &rdquo;Rule 30&rdquo;</span>. </p>
<p></span><b></span><span style=\"font-size: 10.8pt; color: #008000;\">3. Graphical Animation.</b></p>
<p><i>CellularAutomataLib</i> supports the generation of a graphical animation during the simulation, to display the evolution of the cellular space. If desired, the graphical animation can be generated using the <span style=\"font-family: Courier New;\">Animation</span> model connected to the <span style=\"font-family: Courier New;\">CellSpace </span>(using the <span style=\"font-family: Courier New;\">CAport</span> connectors in both models). The Raylib library is used to generate the graphics of the animation.</p>
<p>The <span style=\"font-family: Courier New;\">Animation</span> model includes parameters to describe the size of the animation window (<span style=\"font-family: Courier New;\">WindowHeigth</span> and <span style=\"font-family: Courier New;\">WindowWidth</span>) and to describe the number of cells that will be displayed in each dimension (<span style=\"font-family: Courier New;\">WindowX</span>, <span style=\"font-family: Courier New;\">WindowY</span>, <span style=\"font-family: Courier New;\">WindowZ</span>). Usually, the number of displayed cells will be equal to those of the cellular space, but this model also supports the representation of aggregate states of multiple cells of the cellular space as a single cell in the animation. </p>
<p>The model also includes three functions used to manage the animation: <span style=\"font-family: Courier New;\">SetDisplayFunction</span> is used to associate a display function with the cellular space; <span style=\"font-family: Courier New;\">StepPlot</span> is the function used to actually display the state of the cells during each step; and <span style=\"font-family: Courier New;\">InitAnimation</span> that is used to initialize the animation window.</p>
<p>The animation is initialized using the parameters of the model and the <span style=\"font-family: Courier New;\">InitAnimation</span> function. The user needs to redeclare the <span style=\"font-family: Courier New;\">SetDisplayFunction</span> with his own display function to define how the state of the cells will be displayed. After that, the animation is periodically updated, following the intervals indicated by the <span style=\"font-family: Courier New;\">Tstep</span> and <span style=\"font-family: Courier New;\">intial_step</span> parameters, using the <span style=\"font-family: Courier New;\">StepPlot</span> function. Currently, only one animation window per simulation is supported.</p>
<p><br>In the rule30 model, state 0 is displayed in black, and state 1 is displayed in yellow (cf. <span style=\"font-family: Courier New;\">RDisplay</span> function in <span style=\"font-family: Courier New;\">wolfram.c</span>). The first 10 steps of simulation are shown below (the number of step is represented in the vertical axis).</p>
<p><img src=\"modelica://CellularAutomataLib/Resources/FIGS/rule30sim.png\"/> </p>
<p></span><b></span><span style=\"font-size: 10.8pt; color: #008000;\">4. Additional Rules.</b></p>
<p><i>CellularAutomataLib</i> also includes the <span style=\"font-family: Courier New;\">AdditionalRule</span> model to facilitate the application of multiple transition rules to the same cellular space. This model can be used to perform an additional transtition for the cells, simultaneously to the transition already performed by the <span style=\"font-family: Courier New;\">CellSpace</span> model, or to sequentially apply different transition rules to the same space while maintaining the evolution of the cells in the space among different transitions. </p>
<p>Note that for simultaneous transitions, the order in which the different rules are applied depends on the Modelica simulation algorithm.</p>
<p>In order to sequentially apply the additional rule, the model includes the <span style=\"font-family: Courier New;\">initial_step</span>, <span style=\"font-family: Courier New;\">Tstep</span> and <span style=\"font-family: Courier New;\">max_step</span> parameters to define the time to start the execution of the rule, the interval between steps and the maximum number of steps to be performed (these parameters are analogous to those in the <span style=\"font-family: Courier New;\">CellSpace</span> model).</p>
<p>The <span style=\"font-family: Courier New;\">AdditionalRule</span> model includes an <span style=\"font-family: Courier New;\">Initial</span> function, that can be used to re-initialize the state of the selected cells, and a <span style=\"font-family: Courier New;\">Rule</span> function, that corresponds to the transition function. Both functions need to be defined using external C code and redeclared when instantiating the model.</p>
</html>"));
  end NewModels;

  class InterfaceModels "Interfaces with other Modelica models"
    extends Modelica.Icons.Information;
    annotation (
     preferredView = "info",
      Documentation(info="<html>
<p><br><b><span style=\"font-size: 14pt; color: #008000;\">Interface models included in <i>CellularAutomataLib</span></b></i></p>
<p>The library includes five interface models that can be used to combine CA models with other CA or Modelica models. </p>
<p></span><b></span><span style=\"font-size: 10.8pt; color: #008000;\">Input Region</b></p>
<p><i>CellularAutomataLib</i> supports describing models composed of several cellular spaces. The communication between spaces is described using the Input Region model (<span style=\"font-family: Courier New;\">InputRegion</span>). </p>
<p>The combination of cellular spaces is performed by translating the state of some cells (e.g., a region) from one space as inputs for the another. The prototype of the <span style=\"font-family: Courier New;\">Rule</span> function in C includes a vector of the received inputs, in order to allow the user to manage them during the transition. Each Input Region has associated an input identifier, set using the parameter <span style=\"font-family: Courier New;\">input_id</span>, that can be used as index for the vector of inputs of the transition function. </p>
<p>The Input Region model has two interface ports: <span style=\"font-family: Courier New;\">FROM</span> and <span style=\"font-family: Courier New;\">TO</span>. These interface ports are used to connect to the involved cellular spaces. The state of the cell [i, j]|i &isin; [<span style=\"font-family: Courier New;\">XFromRange[1]</span>,<span style=\"font-family: Courier New;\">XFromRange[2]</span>], j &isin; [<span style=\"font-family: Courier New;\">YFromRange[1]</span>,<span style=\"font-family: Courier New;\">YFromRange[2]</span>], and k &isin; [<span style=\"font-family: Courier New;\">ZFromRange[1]</span>,<span style=\"font-family: Courier New;\">ZFromRange[2]</span>] in the <span style=\"font-family: Courier New;\">FROM</span> space, is translated using the <span style=\"font-family: Courier New;\">SetInput</span> function into an input for the cell [l, m, n]|l &isin; [<span style=\"font-family: Courier New;\">XTo</span>, <span style=\"font-family: Courier New;\">XTo</span> + <span style=\"font-family: Courier New;\">XFromRange[2]-XFromRange[1]</span>], m &isin; [<span style=\"font-family: Courier New;\">YTo</span>, <span style=\"font-family: Courier New;\">YTo</span> + <span style=\"font-family: Courier New;\">YFromRange</span>[2] - <span style=\"font-family: Courier New;\">YFromRange</span>[1]] , m &isin; [<span style=\"font-family: Courier New;\">ZTo</span>, ZTo + <span style=\"font-family: Courier New;\">ZFromRange</span>[2] - <span style=\"font-family: Courier New;\">ZFromRange</span>[1]] in the TO space. <span style=\"font-family: Courier New;\">XFromRange</span>, <span style=\"font-family: Courier New;\">YFromRange</span>, <span style=\"font-family: Courier New;\">ZFromRange</span>, <span style=\"font-family: Courier New;\">XTo</span>, <span style=\"font-family: Courier New;\">YTo</span>, and <span style=\"font-family: Courier New;\">ZTo</span> are parameters of the model. The communication is started at time = <span style=\"font-family: Courier New;\">comm_start</span> and is performed every <span style=\"font-family: Courier New;\">comm_rate</span> time.</p>
<p>The function <span style=\"font-family: Courier New;\">void SetInput(void* Fspace, int Fx, int Fy, int Fz, void* Tspace, int Tx, int Ty, int Tz, int input_id)</span> from the <span style=\"font-family: Courier New;\">draft.c</span> file can be used to redeclare the <span style=\"font-family: Courier New;\">SetInput</span> function of this model. </p>
<p></span><b></span><span style=\"font-size: 10.8pt; color: #008000;\">Output Region</b></p>
<p>The Output Region model can be used to observe the state of the cells in a region of the automata connected to the <span style=\"font-family: Courier New;\">FROM</span> port. The state is translated into an output <i>Real</i> signal that can be used by other Modelica models. The region of selected cells is defined by the coordinates defined by <span style=\"font-family: Courier New;\">XFromRange</span>, <span style=\"font-family: Courier New;\">YFromRange</span> and <span style=\"font-family: Courier New;\">ZFromRange</span>.</p>
<p>This model has been divided in two, the <span style=\"font-family: Courier New;\">OutputRegion</span> and the <span style=\"font-family: Courier New;\">OutputRegionM</span> models. </p>
<p><br>The <span style=\"font-family: Courier New;\">OutputRegion</span> model contains an output <i>Real</i> port, <span style=\"font-family: Courier New;\">y</span>. Depending on the value of the parameter <span style=\"font-family: Courier New;\">Output_type</span>, the state is observed in different ways:</p>
<ul>
<li>(AVERAGE): the value of <span style=\"font-family: Courier New;\">y</span> is calculated as the average value of the states of the cells in the region. </li>
<li>(MAX): the value of <span style=\"font-family: Courier New;\">y</span> is calculated as the maximum value of the states of the cells in the region. </li>
<li>(MIN): the value of <span style=\"font-family: Courier New;\">y</span> is calculated as the minimum value of the states of the cells in the region. </li>
<li>(SUM): the value of <span style=\"font-family: Courier New;\">y</span> is calculated as the sum of the values of the states of the cells in the region. </li>
</ul>
<p>The <span style=\"font-family: Courier New;\">OutputRegionM</span> model contains a matrix of output <i>Real</i> ports, <span style=\"font-family: Courier New;\">yM[XFromRange[2]-XFromRange[1]+1,&nbsp;YFromRange[2]-YFromRange[1]+1,&nbsp;ZFromRange[2]-ZFromRange[1]+1]</span>. The value of the state of the i,j,z-th cell in the space is assigned to <span style=\"font-family: Courier New;\">yM[l,m,n]</span> (where <span style=\"font-family: Courier New;\">l=1:(XFromRange[2]-XFromRange[1]+1)</span>, <span style=\"font-family: Courier New;\">m = 1:(YFromRange[2]-YFromRange[1]+1)</span> and <span style=\"font-family: Courier New;\">n=1:(ZFromRange[2]-ZFromRange[1]+1)</span>). Since the size of <span style=\"font-family: Courier New;\">yM</span> can be the size of the cellular space, and the matrix is defined in Modelica, the automatic translation of the model has to manage the definition of <span style=\"font-family: Courier New;\">yM</span> affecting the scalability and the performance of the simulation. This has to be taken into account when including the <span style=\"font-family: Courier New;\">OutputRegionM</span> model in CA models.</p>
<p>The value of the state, in both models, is translated into a <i>Real</i> value using the <i>ExtOutput</i> function, that can be redeclared using the <span style=\"font-family: Courier New;\">double ExtOutput(void* space, int x, int y, int z)</span> function included in <span style=\"font-family: Courier New;\">draft.c. </span></p>
<p></span><b></span><span style=\"font-size: 10.8pt; color: #008000;\">External Init Region</b></p>
<p>The <span style=\"font-family: Courier New;\">ExtInitRegion</span> model can be used to set the initial state of a region of cells in the space using the value of an external signal. The model has an input port, named <span style=\"font-family: Courier New;\">u</span>, where a <i>Real</i> signal is received, and a port named <span style=\"font-family: Courier New;\">TO</span> that connects to the CA. The value of <span style=\"font-family: Courier New;\">u</span> is translated, using the <i>ExtInit</i> function, into a cell state that will be used to initialize the cells in the region of the connected automaton. If <span style=\"font-family: Courier New;\">u</span> is not connected to another model its value is set to 0.</p>
<p>The region is defined by the coodirnates defined by parameters <span style=\"font-family: Courier New;\">XRange</span>, <span style=\"font-family: Courier New;\">YRange</span> and <span style=\"font-family: Courier New;\">ZRange</span>. </p>
<p>The <i>ExtInit</i> function can be redeclared using the <span style=\"font-family: Courier New;\">void ExtInit(void* space, int x, int y, int z, double value)</span> function included in <span style=\"font-family: Courier New;\">draft.c</span>. </p>
<p></span><b></span><span style=\"font-size: 10.8pt; color: #008000;\">External Input Region</b></p>
<p>Similarly to the Input Region model, the model <span style=\"font-family: Courier New;\">ExtInputRegion</span> can be used to set an input to a region of cells in the automata. In this case the input is generated using an external signal instead of the state of the cells of other automata.</p>
<p>This model receives an external <i>Real</i> input signal through port <span style=\"font-family: Courier New;\">u</span>, which is used as input for a region of cells in the automata connected to port <span style=\"font-family: Courier New;\">TO</span>. Similarly to the other interface models, the region is defined by the coordinates declared using parameters <span style=\"font-family: Courier New;\">XToRange</span>, <span style=\"font-family: Courier New;\">YToRange</span> and <span style=\"font-family: Courier New;\">ZToRange</span>.</p>
<p>The input is assigned to the position <span style=\"font-family: Courier New;\">input_id</span> of the vector of inputs, that is available for the user in the transition function. The external signal, <span style=\"font-family: Courier New;\">u</span>, can be observed using the following methods (defined by the parameter <span style=\"font-family: Courier New;\">Input_type</span>), in order to be converted into an input:</p>
<ul>
<li><i>Quantizer</i>: the input is set every time the value of the signal changes by a defined value or quantum.</li>
<li><i>Cross_UP</i>: the input is set every time the value of the signal crosses a defined threshold in the upwards direction.</li>
<li><i>Cross_DOWN</i>: the input is set every time the value of the signal crosses a defined threshold in the downwards direction.</li>
<li><i>Cross_ANY</i>: the input is set every time the value of the signal crosses a defined threshold in any direction.</li>
<li><i>Sample</i>: the input is set periodically using the <span style=\"font-family: monospace;\">sample</span> operator.</li>
</ul>
<p>The signal is translated into an input using the function <i>ExtInput</i>, that can be redeclared using the <span style=\"font-family: Courier New;\">void ExtInput(void* space,int x, int y, int z, double value, int input_id)</span> function included in <span style=\"font-family: Courier New;\">draft.c</span>. </p>
</html>"));
  end InterfaceModels;
  annotation (
   preferredView = "info",
    Documentation(info="<html>
<p><b><span style=\"font-size: 14pt; color: #008000;\">Users Guide of CellularAutomataLib</span></b> </p>
<p>This package includes the user oriented documentation aimed to faciliate the development of new CA models using CellularAutomataLib.</p>
<p>The following packages of this documentation detail how to install the library, construct new models and how to interface them with other CA and other Modelica models.</p>
<p>Each model or package of the library contains its own documentation.</p>
<p><b><span style=\"font-size: 11pt; color: #008000;\">Cellular Automata</span></b> </p>
<p>Cellular automata (CA) are a class of models initially proposed in the 1940s by John von Neumann and Stanislaw Ulam. </p>
<p>CA are dynamic, discrete-time and discrete-space models. They are represented as a grid of identical discrete volumes, named cells. The grid can be in any finite number of dimensions. The state of each single cell is finite and it is usually represented using integer numbers. The operational dynamics of the automata is described by a rule or transition function that is used to update the state of each cell at discrete time steps. This rule constitutes a function of the current state of the cell and the state of its neighbors, and defines the state of the cell for the next time step. </p>
<p>Examples of different neighborhoods in 2D are:</p>
<ul>
<li>the Moore&rsquo;s neighborhood that includes all the surrounding cells; <img src=\"modelica://CellularAutomataLib/Resources/FIGS/moore.png\"/> </li>
<li>the von Neumann&rsquo;s neighborhood that includes the cells adjoining the four faces of one cell;<img src=\"modelica://CellularAutomataLib/Resources/FIGS/neumann.png\"/> </li>
<li>or the extended von Neumann&rsquo;s that also includes each cell just beyond one of the four adjoining cells. <img src=\"modelica://CellularAutomataLib/Resources/FIGS/neumann-ext.png\"/> </li>
</ul>
<p>As it can be observed, the definition and behavior of the CA are simple. CA can provide an intuitive way of describing complex behavior using simple rules. CA may be considered as discrete idealizations in time and space of physical systems. Due to its simplicity, CA have been used to describe models of complex systems in multiple domains. CA models have been developed in areas like chemistry, economics, medicine, biology and environment, and urban architecture, among many others. </p>
<p><b><span style=\"font-size: 11pt; color: #008000;\">Structure of the library</span></b> </p>
<p>The functionality of the library to construct new CA models in contained in the <i>Components</i> package. The data structures and simulation algorihtms that implement the behavior of these components is included in the <span style=\"font-family: monospace;\">CellularAutomataLib.c</span> file. </p>
<p>The <i>Examples</i> package includes multiple examples arranged by the dimension of their cellular space. These examples demonstrate the functionality of the library and may serve to facilitate the construction of new models. The external C code required to describe new models, and the one used for the examples, is contained in the <span style=\"font-family: monospace;\">Resources/Include/</span> directory of the library. </p>
</html>"));
end Documentation;
